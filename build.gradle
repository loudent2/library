plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'maven-publish'
	id 'com.google.cloud.tools.jib' version '3.4.1'
	id 'org.openapi.generator' version '7.10.0'
	id 'com.diffplug.spotless' version '6.25.0'
	id 'jacoco'
}

ext {
	librarySpecPackage = 'com.loudent.library'
	versions = [
		springBoot        : '3.4.3',
		springDepMgmt     : '1.1.4',
		openApiGenerator  : '7.10.0',
		spotless          : '6.25.0',
		jacoco            : '0.8.11',
		jib               : '3.4.1',
		lombok            : '1.18.30',
		guava             : '33.1.0-jre',
		jackson           : '2.17.0',
		hibernateValidator: '7.0.1.Final',
		swaggerAnnotations: '2.2.20',
		aspectj           : '1.9.20.1',
		awsJavaSdk        : '1.12.783',
		awsSdkBom         : '2.25.13',
		googleJavaFormat  : '1.17.0'
	]
}

java {
	sourceCompatibility = '17'
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'

	compileOnly "org.projectlombok:lombok:${versions.lombok}"
	annotationProcessor "org.projectlombok:lombok:${versions.lombok}"
	testCompileOnly "org.projectlombok:lombok:${versions.lombok}"
	testAnnotationProcessor "org.projectlombok:lombok:${versions.lombok}"

	implementation "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
	implementation "org.hibernate.validator:hibernate-validator:${versions.hibernateValidator}"
	implementation "io.swagger.core.v3:swagger-annotations:${versions.swaggerAnnotations}"

	implementation platform("software.amazon.awssdk:bom:${versions.awsSdkBom}")
	implementation 'software.amazon.awssdk:dynamodb'
	implementation 'software.amazon.awssdk:auth'
	implementation 'software.amazon.awssdk:dynamodb-enhanced'
	implementation "com.amazonaws:aws-java-sdk-dynamodb:${versions.awsJavaSdk}"

	implementation "com.google.guava:guava:${versions.guava}"

	implementation "org.aspectj:aspectjrt:${versions.aspectj}"
	implementation "org.aspectj:aspectjweaver:${versions.aspectj}"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

configurations.all {
	exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

jacoco {
	toolVersion = versions.jacoco
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required.set(true)
		html.required.set(true)
	}
	classDirectories.setFrom(
			files(classDirectories.files.collect {
				fileTree(dir: it, exclude: [
					'**/com/loudent/library/oas/codegen/**',
					'**/com/loudent/library/dao/**'
				])
			})
			)
}

spotless {
	java {
		targetExclude '**/oas/codegen/**'
		googleJavaFormat versions.googleJavaFormat
		importOrder()
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
	}
	['markdown', 'yaml', 'json'].each { fmt ->
		format fmt, {
			target "**/*.${fmt == 'yaml' ? 'y*ml' : fmt}"
			trimTrailingWhitespace()
			endWithNewline()
		}
	}
	groovyGradle {
		target '*.gradle', 'buildSrc/**/*.gradle'
		greclipse()
	}
}

publishing {
	publications {
		pluginMaven(MavenPublication) {
			from components.java
			versionMapping {
				usage('java-api') { fromResolutionResult() }
				usage('java-runtime') { fromResolutionResult() }
			}
			groupId = 'loudent.project'
			artifactId = 'library'
			version = '1.0.0'
		}
	}
}

test {
	useJUnitPlatform()
}

tasks.named('compileTestJava') {
	group = "verification"
	description = "Compiles test sources with linting options"
	options.compilerArgs += [
		'-Xlint:unchecked',
		'-Xlint:deprecation'
	]
}

tasks.register('generateLibraryApi', org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	group = "openapi tools"
	description = "Generates the Library API from OpenAPI spec"
	generatorName.set("spring")
	library.set("spring-boot")
	inputSpec.set("$rootDir/spec/libraryservice.yml")
	outputDir.set("$buildDir/generated/library")
	apiNameSuffix.set("Library")
	apiPackage.set("${librarySpecPackage}.oas.codegen.api")
	modelPackage.set("${librarySpecPackage}.oas.codegen.model")
	invokerPackage.set("${librarySpecPackage}.oas.codegen.handler")
	configOptions.set([
		useSwaggerUI       : "false",
		dateLibrary        : "java8",
		configPackage      : "${librarySpecPackage}",
		openApiNullable    : "false",
		useJakartaEe       : "true",
		documentationProvider: "none",
		useOptional        : "true",
		responseWrapper    : "CompletableFuture",
		annotationLibrary  : "swagger2",
		interfaceOnly      : "true",
		lombok             : "true",
		useBeanValidation  : "true",
		additionalModelTypeAnnotations: '@software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbBean'
	])
}

tasks.register('moveLibraryApiSources', Copy) {
	group = "openapi tools"
	description = "Copies generated Library sources to src/main/java"
	from("$buildDir/generated/library/src/main/java/${librarySpecPackage.replace('.', '/')}")
	into("src/main/java/${librarySpecPackage.replace('.', '/')}")
	include("**/*.java")
}

tasks.named('generateLibraryApi') {
	finalizedBy('moveLibraryApiSources')
}

tasks.register('cleanOpenApiGenerated', Delete) {
	group = "openapi tools"
	delete "src/main/java/${librarySpecPackage.replace('.', '/')}/oas"
}

jib {
	dockerClient {
		executable = '/usr/local/bin/docker'
		environment = System.getenv()
	}
	from {
		image = 'eclipse-temurin:17-jdk-alpine'
	}
	to {
		image = 'loudent.project/library'
		tags = ['1.0.0', 'latest']
	}
	container {
		mainClass = 'com.loudent.library.LibraryApplication'
		ports = ['8080']
	}
}